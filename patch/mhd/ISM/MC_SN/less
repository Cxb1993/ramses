subroutine courant_fine(ilevel)					subroutine courant_fine(ilevel)
  use amr_commons						  use amr_commons
  use hydro_commons						  use hydro_commons
  use poisson_commons						  use poisson_commons
  implicit none							  implicit none
#ifndef WITHOUTMPI						#ifndef WITHOUTMPI
  include 'mpif.h'						  include 'mpif.h'
#endif								#endif
  integer::ilevel						  integer::ilevel
  !----------------------------------------------------------	  !----------------------------------------------------------
  ! Using the Courant-Friedrich-Levy stability condition,    	  ! Using the Courant-Friedrich-Levy stability condition,    
  ! this routine computes the maximum allowed time-step.     	  ! this routine computes the maximum allowed time-step.     
  !----------------------------------------------------------	  !----------------------------------------------------------
  integer::i,ivar,idim,ind,ncache,igrid,iskip			  integer::i,ivar,idim,ind,ncache,igrid,iskip
  integer::info,nleaf,ngrid,nx_loc				  integer::info,nleaf,ngrid,nx_loc
  integer,dimension(1:nvector),save::ind_grid,ind_cell,ind_le	  integer,dimension(1:nvector),save::ind_grid,ind_cell,ind_le

  real(dp)::dt_lev,dx,vol,scale					  real(dp)::dt_lev,dx,vol,scale
  real(kind=8)::mass_loc,ekin_loc,eint_loc,emag_loc,dt_loc	  real(kind=8)::mass_loc,ekin_loc,eint_loc,emag_loc,dt_loc
  real(kind=8)::mass_all,ekin_all,eint_all,emag_all,dt_all	  real(kind=8)::mass_all,ekin_all,eint_all,emag_all,dt_all
  real(kind=8),dimension(4)::comm_buffin,comm_buffout		  real(kind=8),dimension(4)::comm_buffin,comm_buffout
  real(dp),dimension(1:nvector,1:nvar+3),save::uu		  real(dp),dimension(1:nvector,1:nvar+3),save::uu
  real(dp),dimension(1:nvector,1:ndim),save::gg			  real(dp),dimension(1:nvector,1:ndim),save::gg

  if(numbtot(1,ilevel)==0)return				  if(numbtot(1,ilevel)==0)return
  if(verbose)write(*,111)ilevel					  if(verbose)write(*,111)ilevel

  call velocity_fine(ilevel)					  call velocity_fine(ilevel)

  mass_all=0.0d0; mass_loc=0.0d0				  mass_all=0.0d0; mass_loc=0.0d0
  ekin_all=0.0d0; ekin_loc=0.0d0				  ekin_all=0.0d0; ekin_loc=0.0d0
  emag_all=0.0d0; emag_loc=0.0d0				  emag_all=0.0d0; emag_loc=0.0d0
  eint_all=0.0d0; eint_loc=0.0d0				  eint_all=0.0d0; eint_loc=0.0d0
  dt_all=dtnew(ilevel); dt_loc=dt_all				  dt_all=dtnew(ilevel); dt_loc=dt_all

  ! Mesh spacing at that level					  ! Mesh spacing at that level
  nx_loc=icoarse_max-icoarse_min+1				  nx_loc=icoarse_max-icoarse_min+1
  scale=boxlen/dble(nx_loc)					  scale=boxlen/dble(nx_loc)
  dx=0.5D0**ilevel*scale					  dx=0.5D0**ilevel*scale
  vol=dx**ndim							  vol=dx**ndim

  ! Loop over active grids by vector sweeps			  ! Loop over active grids by vector sweeps
  ncache=active(ilevel)%ngrid					  ncache=active(ilevel)%ngrid
  do igrid=1,ncache,nvector					  do igrid=1,ncache,nvector
     ngrid=MIN(nvector,ncache-igrid+1)				     ngrid=MIN(nvector,ncache-igrid+1)
     do i=1,ngrid						     do i=1,ngrid
        ind_grid(i)=active(ilevel)%igrid(igrid+i-1)		        ind_grid(i)=active(ilevel)%igrid(igrid+i-1)
     end do							     end do
     								     
     ! Loop over cells						     ! Loop over cells
     do ind=1,twotondim        					     do ind=1,twotondim        
        iskip=ncoarse+(ind-1)*ngridmax				        iskip=ncoarse+(ind-1)*ngridmax
        do i=1,ngrid						        do i=1,ngrid
           ind_cell(i)=ind_grid(i)+iskip			           ind_cell(i)=ind_grid(i)+iskip
        end do							        end do
        							        
        ! Gather leaf cells					        ! Gather leaf cells
        nleaf=0							        nleaf=0
        do i=1,ngrid						        do i=1,ngrid
           if(son(ind_cell(i))==0)then				           if(son(ind_cell(i))==0)then
              nleaf=nleaf+1					              nleaf=nleaf+1
              ind_leaf(nleaf)=ind_cell(i)			              ind_leaf(nleaf)=ind_cell(i)
           end if						           end if
        end do							        end do

        ! Gather hydro variables				        ! Gather hydro variables
        do ivar=1,nvar+3					        do ivar=1,nvar+3
           do i=1,nleaf						           do i=1,nleaf
              uu(i,ivar)=uold(ind_leaf(i),ivar)			              uu(i,ivar)=uold(ind_leaf(i),ivar)
           end do						           end do
        end do							        end do
        							        
        ! Gather gravitational acceleration			        ! Gather gravitational acceleration
        gg=0.0d0						        gg=0.0d0
        if(poisson)then						        if(poisson)then
           do idim=1,ndim					           do idim=1,ndim
              do i=1,nleaf					              do i=1,nleaf
                 gg(i,idim)=f(ind_leaf(i),idim)			                 gg(i,idim)=f(ind_leaf(i),idim)
              end do						              end do
           end do						           end do
        end if							        end if
        							        
        ! Compute total mass					        ! Compute total mass
        do i=1,nleaf						        do i=1,nleaf
           mass_loc=mass_loc+uu(i,1)*vol			           mass_loc=mass_loc+uu(i,1)*vol
        end do							        end do
        							        
        ! Compute total energy					        ! Compute total energy
        do i=1,nleaf						        do i=1,nleaf
           ekin_loc=ekin_loc+uu(i,5)*vol			           ekin_loc=ekin_loc+uu(i,5)*vol
        end do							        end do
        							        
        ! Compute total magnetic energy				        ! Compute total magnetic energy
        do ivar=1,3						        do ivar=1,3
           do i=1,nleaf						           do i=1,nleaf
              emag_loc=emag_loc+0.125d0*(uu(i,5+ivar)+uu(i,nv	              emag_loc=emag_loc+0.125d0*(uu(i,5+ivar)+uu(i,nv
           end do						           end do
        end do							        end do
        							        
        ! Compute total internal energy				        ! Compute total internal energy
        do i=1,nleaf						        do i=1,nleaf
           eint_loc=eint_loc+uu(i,5)*vol			           eint_loc=eint_loc+uu(i,5)*vol
        end do							        end do
        do ivar=1,3						        do ivar=1,3
           do i=1,nleaf						           do i=1,nleaf
              eint_loc=eint_loc-0.5d0*uu(i,1+ivar)**2/uu(i,1)	              eint_loc=eint_loc-0.5d0*uu(i,1+ivar)**2/uu(i,1)
                   & -0.125d0*(uu(i,5+ivar)+uu(i,nvar+ivar))*	                   & -0.125d0*(uu(i,5+ivar)+uu(i,nvar+ivar))*
           end do						           end do
        end do							        end do
        							        
        ! Compute CFL time-step					        ! Compute CFL time-step
        if(nleaf>0)then						        if(nleaf>0)then
           call cmpdt(uu,gg,dx,dt_lev,nleaf)			           call cmpdt(uu,gg,dx,dt_lev,nleaf)
           dt_loc=min(dt_loc,dt_lev)				           dt_loc=min(dt_loc,dt_lev)
        end if							        end if
        							        
     end do							     end do
     ! End loop over cells					     ! End loop over cells
     								     
  end do							  end do
  ! End loop over grids						  ! End loop over grids

  ! Compute global quantities					  ! Compute global quantities
#ifndef WITHOUTMPI						#ifndef WITHOUTMPI
  comm_buffin(1)=mass_loc					  comm_buffin(1)=mass_loc
  comm_buffin(2)=ekin_loc					  comm_buffin(2)=ekin_loc
  comm_buffin(3)=eint_loc					  comm_buffin(3)=eint_loc
  comm_buffin(4)=emag_loc					  comm_buffin(4)=emag_loc
  call MPI_ALLREDUCE(comm_buffin,comm_buffout,4,MPI_DOUBLE_PR	  call MPI_ALLREDUCE(comm_buffin,comm_buffout,4,MPI_DOUBLE_PR
       &MPI_COMM_WORLD,info)					       &MPI_COMM_WORLD,info)
  call MPI_ALLREDUCE(dt_loc     ,dt_all      ,1,MPI_DOUBLE_PR	  call MPI_ALLREDUCE(dt_loc     ,dt_all      ,1,MPI_DOUBLE_PR
       &MPI_COMM_WORLD,info)					       &MPI_COMM_WORLD,info)
  mass_all=comm_buffout(1)					  mass_all=comm_buffout(1)
  ekin_all=comm_buffout(2)					  ekin_all=comm_buffout(2)
  eint_all=comm_buffout(3)					  eint_all=comm_buffout(3)
  emag_all=comm_buffout(4)					  emag_all=comm_buffout(4)
#endif								#endif
#ifdef WITHOUTMPI						#ifdef WITHOUTMPI
  mass_all=mass_loc						  mass_all=mass_loc
  ekin_all=ekin_loc						  ekin_all=ekin_loc
  eint_all=eint_loc						  eint_all=eint_loc
  emag_all=emag_loc						  emag_all=emag_loc
  dt_all=dt_loc							  dt_all=dt_loc
#endif								#endif

  mass_tot=mass_tot+mass_all					  mass_tot=mass_tot+mass_all
  ekin_tot=ekin_tot+ekin_all					  ekin_tot=ekin_tot+ekin_all
  eint_tot=eint_tot+eint_all					  eint_tot=eint_tot+eint_all
  emag_tot=emag_tot+emag_all					  emag_tot=emag_tot+emag_all
  dtnew(ilevel)=MIN(dtnew(ilevel),dt_all)			  dtnew(ilevel)=MIN(dtnew(ilevel),dt_all)

111 format('   Entering courant_fine for level ',I2)		111 format('   Entering courant_fine for level ',I2)

end subroutine courant_fine					end subroutine courant_fine
!#########################################################	!#########################################################
!#########################################################	!#########################################################
!#########################################################	!#########################################################
!#########################################################	!#########################################################
subroutine velocity_fine(ilevel)				subroutine velocity_fine(ilevel)
  use amr_commons      !, ONLY: dp,ndim,nvector,boxlen,t	  use amr_commons      !, ONLY: dp,ndim,nvector,boxlen,t
!  use hydro_parameters !, ONLY: nvar,boundary_var,gamma,bx_b	!  use hydro_parameters !, ONLY: nvar,boundary_var,gamma,bx_b
  use hydro_commons						  use hydro_commons
  implicit none							  implicit none
  integer::ilevel						  integer::ilevel
  !----------------------------------------------------------	  !----------------------------------------------------------
  ! This routine computes the gravitational acceleration,	  ! This routine computes the gravitational acceleration,
  ! the maximum density rho_max, and the potential energy	  ! the maximum density rho_max, and the potential energy
  !----------------------------------------------------------	  !----------------------------------------------------------
  integer::igrid,ngrid,ncache,i,ind,iskip,ix,iy,iz		  integer::igrid,ngrid,ncache,i,ind,iskip,ix,iy,iz
  integer::info,ibound,nx_loc,idim,neul=5			  integer::info,ibound,nx_loc,idim,neul=5
  real(dp)::dx,dx_loc,scale,d,u,v,w,A,B,C			  real(dp)::dx,dx_loc,scale,d,u,v,w,A,B,C
  real(kind=8)::rho_max_loc,rho_max_all,epot_loc,epot_all	  real(kind=8)::rho_max_loc,rho_max_all,epot_loc,epot_all
  real(dp),dimension(1:twotondim,1:3)::xc			  real(dp),dimension(1:twotondim,1:3)::xc
  real(dp),dimension(1:3)::skip_loc				  real(dp),dimension(1:3)::skip_loc

  integer ,dimension(1:nvector),save::ind_grid,ind_cell		  integer ,dimension(1:nvector),save::ind_grid,ind_cell
  real(dp),dimension(1:nvector,1:ndim),save::xx			  real(dp),dimension(1:nvector,1:ndim),save::xx
  real(dp),dimension(1:nvector,1:3),save::vv			  real(dp),dimension(1:nvector,1:3),save::vv
  real(dp),dimension(1:nvector,1:nvar+3)::q   ! Primitive var	  real(dp),dimension(1:nvector,1:nvar+3)::q   ! Primitive var
  real(dp)::pi,time						  real(dp)::pi,time
  integer ::ivar,jgrid,ind_cell_vois				  integer ::ivar,jgrid,ind_cell_vois
  real(dp)::scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T2	  real(dp)::scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T2
  real(dp)::dx_min, fact, Emag,Emag0				  real(dp)::dx_min, fact, Emag,Emag0


  call units(scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T	  call units(scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T

  Cwnm = sqrt(8000./scale_T2)					  Cwnm = sqrt(8000./scale_T2)

  pi=ACOS(-1.0d0)						  pi=ACOS(-1.0d0)

  time = t * Cwnm / boxlen					  time = t * Cwnm / boxlen

 								 

  if(numbtot(1,ilevel)==0)return				  if(numbtot(1,ilevel)==0)return

  ! Mesh size at level ilevel in coarse cell units		  ! Mesh size at level ilevel in coarse cell units
  dx=0.5D0**ilevel						  dx=0.5D0**ilevel
  								  
  ! Rescaling factors						  ! Rescaling factors
  nx_loc=(icoarse_max-icoarse_min+1)				  nx_loc=(icoarse_max-icoarse_min+1)
  skip_loc=(/0.0d0,0.0d0,0.0d0/)				  skip_loc=(/0.0d0,0.0d0,0.0d0/)
  if(ndim>0)skip_loc(1)=dble(icoarse_min)			  if(ndim>0)skip_loc(1)=dble(icoarse_min)
  if(ndim>1)skip_loc(2)=dble(jcoarse_min)			  if(ndim>1)skip_loc(2)=dble(jcoarse_min)
  if(ndim>2)skip_loc(3)=dble(kcoarse_min)			  if(ndim>2)skip_loc(3)=dble(kcoarse_min)
  scale=dble(nx_loc)/boxlen					  scale=dble(nx_loc)/boxlen
  dx_loc=dx/scale						  dx_loc=dx/scale

  dx_min = (0.5D0**levelmin)/scale				  dx_min = (0.5D0**levelmin)/scale

  ! Set position of cell centers relative to grid center	  ! Set position of cell centers relative to grid center
  do ind=1,twotondim						  do ind=1,twotondim
     iz=(ind-1)/4						     iz=(ind-1)/4
     iy=(ind-1-4*iz)/2						     iy=(ind-1-4*iz)/2
     ix=(ind-1-2*iy-4*iz)					     ix=(ind-1-2*iy-4*iz)
     if(ndim>0)xc(ind,1)=(dble(ix)-0.5D0)*dx			     if(ndim>0)xc(ind,1)=(dble(ix)-0.5D0)*dx
     if(ndim>1)xc(ind,2)=(dble(iy)-0.5D0)*dx			     if(ndim>1)xc(ind,2)=(dble(iy)-0.5D0)*dx
     if(ndim>2)xc(ind,3)=(dble(iz)-0.5D0)*dx			     if(ndim>2)xc(ind,3)=(dble(iz)-0.5D0)*dx
  end do							  end do
  								  
  !-------------------------------------			  !-------------------------------------
  ! Compute analytical velocity field				  ! Compute analytical velocity field
  !-------------------------------------			  !-------------------------------------
  ncache=active(ilevel)%ngrid					  ncache=active(ilevel)%ngrid
  								  
  ! Loop over grids by vector sweeps				  ! Loop over grids by vector sweeps
  do igrid=1,ncache,nvector					  do igrid=1,ncache,nvector
     ngrid=MIN(nvector,ncache-igrid+1)				     ngrid=MIN(nvector,ncache-igrid+1)
     do i=1,ngrid						     do i=1,ngrid
        ind_grid(i)=active(ilevel)%igrid(igrid+i-1)		        ind_grid(i)=active(ilevel)%igrid(igrid+i-1)
     end do							     end do
     								     
     ! Loop over cells						     ! Loop over cells
     do ind=1,twotondim						     do ind=1,twotondim
        							        
        ! Gather cell indices					        ! Gather cell indices
        iskip=ncoarse+(ind-1)*ngridmax				        iskip=ncoarse+(ind-1)*ngridmax
        do i=1,ngrid						        do i=1,ngrid
           ind_cell(i)=iskip+ind_grid(i)			           ind_cell(i)=iskip+ind_grid(i)
        end do							        end do
        							        
        ! Gather cell centre positions				        ! Gather cell centre positions
        do idim=1,ndim						        do idim=1,ndim
           do i=1,ngrid						           do i=1,ngrid
              xx(i,idim)=xg(ind_grid(i),idim)+xc(ind,idim)	              xx(i,idim)=xg(ind_grid(i),idim)+xc(ind,idim)
           end do						           end do
        end do							        end do
        ! Rescale position from code units to user units	        ! Rescale position from code units to user units
        do idim=1,ndim						        do idim=1,ndim
           do i=1,ngrid						           do i=1,ngrid
              xx(i,idim)=(xx(i,idim)-skip_loc(idim))/scale	              xx(i,idim)=(xx(i,idim)-skip_loc(idim))/scale
           end do						           end do
        end do							        end do
        							        

       do i=1,ngrid						       do i=1,ngrid



        !impose vanishing gradient conditions at the x  faces	        !impose vanishing gradient conditions at the x  faces
        if(  xx(i,1) .lt. 2.*dx_min ) then 			        if(  xx(i,1) .lt. 2.*dx_min ) then 

             !look for the grid neigbour of the top father	             !look for the grid neigbour of the top father
             jgrid = son(nbor(ind_grid(i),2))			             jgrid = son(nbor(ind_grid(i),2))

           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
           if(ind .eq. 2 .or. ind .eq. 4 .or. ind .eq. 6 .or.	           if(ind .eq. 2 .or. ind .eq. 4 .or. ind .eq. 6 .or.
             ind_cell_vois = ind_cell_vois - ngridmax		             ind_cell_vois = ind_cell_vois - ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag

           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 2 .or. ind .eq. 4 .or. ind .eq. 6 .or.	           if(ind .eq. 2 .or. ind .eq. 4 .or. ind .eq. 6 .or.
              uold(ind_cell(i),9) = uold(ind_cell_vois,6)	              uold(ind_cell(i),9) = uold(ind_cell_vois,6)
 								 

              uold(ind_cell(i),6)  = uold(ind_cell(i),9) + uo	              uold(ind_cell(i),6)  = uold(ind_cell(i),9) + uo
           else							           else
              !should be equal to uold(ind_cell(i),7) of the 	              !should be equal to uold(ind_cell(i),7) of the 
              uold(ind_cell(i),9) =  uold(ind_cell_vois,6) + 	              uold(ind_cell(i),9) =  uold(ind_cell_vois,6) + 

              !ensure div B					              !ensure div B
              uold(ind_cell(i),6) =  uold(ind_cell(i),9) + uo	              uold(ind_cell(i),6) =  uold(ind_cell(i),9) + uo
           endif						           endif


							      >
							      >	!           if(ind .eq. 1 .or. ind .eq. 3 .or. ind .eq. 5 .or
							      >	!              uold(ind_cell(i),6) = uold(ind_cell_vois,9)
							      >	 
							      >	!              uold(ind_cell(i),9) = uold(ind_cell(i),6) + uo
							      >	!!              uold(ind_cell(i),9) = uold(ind_cell(i),10) + 
							      >	!           else
							      >	!              !should be equal to uold(ind_cell(i),9) of the
							      >	!              uold(ind_cell(i),6) =  uold(ind_cell(i),7) + u
							      >
							      >	!              !ensure div B
							      >	!              uold(ind_cell(i),9) = uold(ind_cell(i),6) + uo
							      >	!           endif
							      >
							      >
							      >
           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 

        endif							        endif



        !impose vanishing gradient conditions at the x  faces	        !impose vanishing gradient conditions at the x  faces
        if(  xx(i,1) .gt. boxlen-2.*dx_min ) then 		        if(  xx(i,1) .gt. boxlen-2.*dx_min ) then 

             !look for the grid neigbour of the top father	             !look for the grid neigbour of the top father
             jgrid = son(nbor(ind_grid(i),1))			             jgrid = son(nbor(ind_grid(i),1))

           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
           if(ind .eq. 1 .or. ind .eq. 3 .or. ind .eq. 5 .or.	           if(ind .eq. 1 .or. ind .eq. 3 .or. ind .eq. 5 .or.
             ind_cell_vois = ind_cell_vois + ngridmax		             ind_cell_vois = ind_cell_vois + ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag

           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 1 .or. ind .eq. 3 .or. ind .eq. 5 .or.	           if(ind .eq. 1 .or. ind .eq. 3 .or. ind .eq. 5 .or.
              uold(ind_cell(i),6) = uold(ind_cell_vois,9)	              uold(ind_cell(i),6) = uold(ind_cell_vois,9)
 								 
              uold(ind_cell(i),9) = uold(ind_cell(i),10) + uo |	              uold(ind_cell(i),9) = uold(ind_cell(i),6) + uol
							      >	!              uold(ind_cell(i),9) = uold(ind_cell(i),10) + u
           else							           else
              !should be equal to uold(ind_cell(i),9) of the 	              !should be equal to uold(ind_cell(i),9) of the 
              uold(ind_cell(i),6) =  uold(ind_cell(i),10) + u |	              uold(ind_cell(i),6) =  uold(ind_cell(i),7) + uo
							      >	!              uold(ind_cell(i),6) =  uold(ind_cell(i),7) + u

              !ensure div B					              !ensure div B
              uold(ind_cell(i),9) =  uold(ind_cell(i),10) + u |	              uold(ind_cell(i),9) = uold(ind_cell(i),6) + uol
           endif						           endif


           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 

        endif							        endif





        !impose vanishing gradient conditions at the y  faces	        !impose vanishing gradient conditions at the y  faces
        if(  xx(i,2) .lt. 2.*dx_min ) then 			        if(  xx(i,2) .lt. 2.*dx_min ) then 


             !look for the grid neigbour of the top father	             !look for the grid neigbour of the top father
             jgrid = son(nbor(ind_grid(i),4))			             jgrid = son(nbor(ind_grid(i),4))


           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
             !we must add 2*ngridmax because the neighbour of	             !we must add 2*ngridmax because the neighbour of
           if(ind .eq. 3 .or. ind .eq. 4 .or. ind .eq. 7 .or.	           if(ind .eq. 3 .or. ind .eq. 4 .or. ind .eq. 7 .or.
             ind_cell_vois = ind_cell_vois - 2*ngridmax		             ind_cell_vois = ind_cell_vois - 2*ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag


           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 3 .or. ind .eq. 4 .or. ind .eq. 7 .or.	           if(ind .eq. 3 .or. ind .eq. 4 .or. ind .eq. 7 .or.
              uold(ind_cell(i),10) = uold(ind_cell_vois,7)	              uold(ind_cell(i),10) = uold(ind_cell_vois,7)
 								 
              uold(ind_cell(i),7)  = uold(ind_cell(i),9) + uo	              uold(ind_cell(i),7)  = uold(ind_cell(i),9) + uo
           else							           else
              !should be equal to uold(ind_cell(i),7) of the 	              !should be equal to uold(ind_cell(i),7) of the 
              uold(ind_cell(i),10) =  uold(ind_cell(i),9 ) + 	              uold(ind_cell(i),10) =  uold(ind_cell(i),9 ) + 

              !ensure div B					              !ensure div B
              uold(ind_cell(i),7) =  uold(ind_cell(i),9) + uo	              uold(ind_cell(i),7) =  uold(ind_cell(i),9) + uo
           endif						           endif


           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 

        endif							        endif

							      <
							      <
        if(  xx(i,2) .gt. boxlen-2.*dx_min ) then 		        if(  xx(i,2) .gt. boxlen-2.*dx_min ) then 
							      <
							      <
             !look for the grid neigbour of the bottom father	             !look for the grid neigbour of the bottom father
             jgrid = son(nbor(ind_grid(i),3))			             jgrid = son(nbor(ind_grid(i),3))

           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
             !we must add 2*ngridmax because the neighbour of	             !we must add 2*ngridmax because the neighbour of
           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 5 .or.	           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 5 .or.
             ind_cell_vois = ind_cell_vois + 2*ngridmax		             ind_cell_vois = ind_cell_vois + 2*ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag
							      <
							      <

           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 5 .or.	           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 5 .or.
              uold(ind_cell(i),7) = uold(ind_cell_vois,10)	              uold(ind_cell(i),7) = uold(ind_cell_vois,10)
 								 
              uold(ind_cell(i),10)  = uold(ind_cell(i),6) + u	              uold(ind_cell(i),10)  = uold(ind_cell(i),6) + u
           else							           else
              !should be equal to uold(ind_cell(i),10) of the	              !should be equal to uold(ind_cell(i),10) of the
              uold(ind_cell(i),7) =  uold(ind_cell(i),6 ) + u	              uold(ind_cell(i),7) =  uold(ind_cell(i),6 ) + u

              !ensure div B					              !ensure div B
              uold(ind_cell(i),10) =  uold(ind_cell(i),6) + u	              uold(ind_cell(i),10) =  uold(ind_cell(i),6) + u
           endif						           endif

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 


        endif							        endif



        if(  xx(i,3) .lt. 2.*dx_min ) then 			        if(  xx(i,3) .lt. 2.*dx_min ) then 


             !look for the grid neigbour of the bottom father	             !look for the grid neigbour of the bottom father
             jgrid = son(nbor(ind_grid(i),6))			             jgrid = son(nbor(ind_grid(i),6))

           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
             !we must add 2*ngridmax because the neighbour of	             !we must add 2*ngridmax because the neighbour of
           if(ind .eq. 5 .or. ind .eq. 6 .or. ind .eq. 7 .or.	           if(ind .eq. 5 .or. ind .eq. 6 .or. ind .eq. 7 .or.
             ind_cell_vois = ind_cell_vois - 4*ngridmax		             ind_cell_vois = ind_cell_vois - 4*ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag


           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 5 .or. ind .eq. 6 .or. ind .eq. 7 .or.	           if(ind .eq. 5 .or. ind .eq. 6 .or. ind .eq. 7 .or.
              uold(ind_cell(i),11) = uold(ind_cell_vois,8)	              uold(ind_cell(i),11) = uold(ind_cell_vois,8)
 								 
              uold(ind_cell(i),8)  = uold(ind_cell(i),9) + uo	              uold(ind_cell(i),8)  = uold(ind_cell(i),9) + uo
           else							           else
              !should be equal to uold(ind_cell(i),8) of the 	              !should be equal to uold(ind_cell(i),8) of the 
              uold(ind_cell(i),11) =  uold(ind_cell(i), 9) + 	              uold(ind_cell(i),11) =  uold(ind_cell(i), 9) + 

              !ensure div B					              !ensure div B
              uold(ind_cell(i),8) =  uold(ind_cell(i),9) + uo	              uold(ind_cell(i),8) =  uold(ind_cell(i),9) + uo

           endif						           endif

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3


           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 


        endif							        endif


        if(  xx(i,3) .gt. boxlen-2.*dx_min ) then 		        if(  xx(i,3) .gt. boxlen-2.*dx_min ) then 


             !look for the grid neigbour of the bottom father	             !look for the grid neigbour of the bottom father
             jgrid = son(nbor(ind_grid(i),5))			             jgrid = son(nbor(ind_grid(i),5))

           ind_cell_vois = iskip + jgrid 			           ind_cell_vois = iskip + jgrid 
             !remember iskip is calculated above		             !remember iskip is calculated above
             !we must add 2*ngridmax because the neighbour of	             !we must add 2*ngridmax because the neighbour of
           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 3 .or.	           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 3 .or.
             ind_cell_vois = ind_cell_vois + 4*ngridmax		             ind_cell_vois = ind_cell_vois + 4*ngridmax
           endif						           endif

           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)	           uold(ind_cell(i),1:11) =  uold(ind_cell_vois,1:11)

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag	           uold(ind_cell(i),5) = uold(ind_cell(i),5)  - Emag


           ! we have to modify the 2 normal components of the	           ! we have to modify the 2 normal components of the
           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 3 .or.	           if(ind .eq. 1 .or. ind .eq. 2 .or. ind .eq. 3 .or.
              uold(ind_cell(i),8) = uold(ind_cell_vois,11)	              uold(ind_cell(i),8) = uold(ind_cell_vois,11)
 								 
              uold(ind_cell(i),11)  = uold(ind_cell(i),6) + u	              uold(ind_cell(i),11)  = uold(ind_cell(i),6) + u
           else							           else
              !should be equal to uold(ind_cell(i),11) of the	              !should be equal to uold(ind_cell(i),11) of the
              uold(ind_cell(i),8) =  uold(ind_cell(i), 6) + u	              uold(ind_cell(i),8) =  uold(ind_cell(i), 6) + u

              !ensure div B					              !ensure div B
              uold(ind_cell(i),11) =  uold(ind_cell(i),6) + u	              uold(ind_cell(i),11) =  uold(ind_cell(i),6) + u

           endif						           endif

           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1	           A=0.5*(uold(ind_cell(i),6)+uold(ind_cell(i),nvar+1
           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2	           B=0.5*(uold(ind_cell(i),7)+uold(ind_cell(i),nvar+2
           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3	           C=0.5*(uold(ind_cell(i),8)+uold(ind_cell(i),nvar+3

           Emag = 0.5*(A**2+B**2+C**2)				           Emag = 0.5*(A**2+B**2+C**2)

           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 	           uold(ind_cell(i),5) =  uold(ind_cell(i),5) + Emag 



        endif							        endif


       enddo							       enddo



       								       
     end do							     end do
     ! End loop over cells					     ! End loop over cells

  end do							  end do
  ! End loop over grids						  ! End loop over grids

end subroutine velocity_fine					end subroutine velocity_fine
!#########################################################	!#########################################################
!#########################################################	!#########################################################
!#########################################################	!#########################################################
!#########################################################	!#########################################################
