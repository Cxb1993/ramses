recursive subroutine amr_step(ilevel,icount)			recursive subroutine amr_step(ilevel,icount)
  use amr_commons						  use amr_commons
  use pm_commons						  use pm_commons
  use hydro_commons						  use hydro_commons
  use poisson_commons						  use poisson_commons
							      >	#ifdef RT
							      >	  use rt_hydro_commons
							      >	  use SED_module
							      >	#endif
  implicit none							  implicit none
#ifndef WITHOUTMPI						#ifndef WITHOUTMPI
  include 'mpif.h'						  include 'mpif.h'
#endif								#endif
  integer::ilevel,icount					  integer::ilevel,icount
  !----------------------------------------------------------	  !----------------------------------------------------------
  ! This routine is the adaptive-mesh/adaptive-time-step main	  ! This routine is the adaptive-mesh/adaptive-time-step main
  ! Each routine is called using a specific order, don't chan	  ! Each routine is called using a specific order, don't chan
  ! unless you check all consequences first                  	  ! unless you check all consequences first                  
  !----------------------------------------------------------	  !----------------------------------------------------------
  integer::icycle,i,idim,ivar,info			      |	  integer::i,idim,ivar
  logical::ok_defrag						  logical::ok_defrag
  logical,save::first_step=.true.				  logical,save::first_step=.true.
  integer, save::ii=0					      <

  if(numbtot(1,ilevel)==0)return				  if(numbtot(1,ilevel)==0)return

  if(verbose)write(*,999)icount,ilevel				  if(verbose)write(*,999)icount,ilevel

  call velocity_fine(ilevel)				      <
							      <
  !-------------------------------------------			  !-------------------------------------------
  ! Make new refinements and update boundaries			  ! Make new refinements and update boundaries
  !-------------------------------------------			  !-------------------------------------------
  if(levelmin.lt.nlevelmax)then				      |	  if(levelmin.lt.nlevelmax .and..not. static)then
     if(ilevel==levelmin.or.icount>1)then			     if(ilevel==levelmin.or.icount>1)then
        do i=ilevel,nlevelmax					        do i=ilevel,nlevelmax
           if(i>levelmin)then					           if(i>levelmin)then

              !--------------------------			              !--------------------------
              ! Build communicators				              ! Build communicators
              !--------------------------			              !--------------------------
              call build_comm(i)				              call build_comm(i)

              !--------------------------			              !--------------------------
              ! Update boundaries				              ! Update boundaries
              !--------------------------			              !--------------------------
              call make_virtual_fine_int(cpu_map(1),i)		              call make_virtual_fine_int(cpu_map(1),i)
              if(hydro)then					              if(hydro)then
#ifdef SOLVERmhd						#ifdef SOLVERmhd
                 do ivar=1,nvar+3				                 do ivar=1,nvar+3
#else								#else
                 do ivar=1,nvar					                 do ivar=1,nvar
#endif								#endif
                    call make_virtual_fine_dp(uold(1,ivar),i)	                    call make_virtual_fine_dp(uold(1,ivar),i)
							      >	#ifdef SOLVERmhd
                 end do						                 end do
							      >	#else
							      >	                 end do
							      >	#endif
                 if(simple_boundary)call make_boundary_hydro(	                 if(simple_boundary)call make_boundary_hydro(
                 if(poisson)then			      |	              end if
                    do idim=1,ndim			      |	#ifdef RT
                       call make_virtual_fine_dp(f(1,idim),i) |	              if(rt)then
                    end do				      |	                 do ivar=1,nrtvar
                    if(simple_boundary)call make_boundary_for |	                    call make_virtual_fine_dp(rtuold(1,ivar),
                 end if					      |	                 end do
							      >	                 if(simple_boundary)call rt_make_boundary_hyd
							      >	              end if
							      >	#endif
							      >	              if(poisson)then
							      >	                 call make_virtual_fine_dp(phi(1),i)
							      >	                 do idim=1,ndim
							      >	                    call make_virtual_fine_dp(f(1,idim),i)
							      >	                 end do
							      >	                 if(simple_boundary)call make_boundary_force(
              end if						              end if
           end if						           end if

           !--------------------------				           !--------------------------
           ! Refine grids					           ! Refine grids
           !--------------------------				           !--------------------------
           call refine_fine(i)					           call refine_fine(i)
        end do							        end do
     end if							     end if
  end if							  end if

  !--------------------------					  !--------------------------
  ! Load balance						  ! Load balance
  !--------------------------					  !--------------------------
  ok_defrag=.false.						  ok_defrag=.false.
  if(levelmin.lt.nlevelmax)then					  if(levelmin.lt.nlevelmax)then
     if(ilevel==levelmin)then					     if(ilevel==levelmin)then
        if(nremap>0)then					        if(nremap>0)then
           ! Skip first load balance because it has been perf	           ! Skip first load balance because it has been perf
           if(nrestart>0.and.first_step)then			           if(nrestart>0.and.first_step)then
              first_step=.false.				              first_step=.false.
           else							           else
              if(MOD(nstep_coarse,nremap)==0)then		              if(MOD(nstep_coarse,nremap)==0)then
                 call load_balance				                 call load_balance
                 call defrag					                 call defrag
                 ok_defrag=.true.				                 ok_defrag=.true.
              endif						              endif
           end if						           end if
        end if							        end if
     endif							     endif
  end if							  end if

  !-----------------						  !-----------------
							      >	  ! Update sink cloud particle properties
							      >	  !-----------------
							      >	  if(sink)call update_cloud(ilevel,.false.)
							      >
							      >	  !-----------------
  ! Particle leakage						  ! Particle leakage
  !-----------------						  !-----------------
  if(pic)call make_tree_fine(ilevel)				  if(pic)call make_tree_fine(ilevel)
							      |	  
  !------------------------					  !------------------------
  ! Output results to files					  ! Output results to files
  !------------------------					  !------------------------
  if(ilevel==levelmin)then					  if(ilevel==levelmin)then
     if(mod(nstep_coarse,foutput)==0.or.aexp>=aout(iout).or.t	     if(mod(nstep_coarse,foutput)==0.or.aexp>=aout(iout).or.t
        if(.not.ok_defrag)then					        if(.not.ok_defrag)then
           call defrag						           call defrag
        endif							        endif
							      >
        call dump_all						        call dump_all
        if(clumpfind)then 				      |
           if(ndim<3)then				      |	        if(gas_analytics) call gas_ana
              print*,"sorry, clumpfinder works currently in 3 |
           else						      |	        ! Run the clumpfinder
              if(verbose)print*,"enter clumpfinder"	      |	        if(clumpfind .and. ndim==3) call clump_finder(.true.)
              call clump_finder(.true.)			      |
              if(verbose)print*,"escaped clumpfinder"	      |	        ! Dump lightcone
           endif					      |	        if(lightcone) call output_cone()
        endif						      |
     endif							     endif
 							      <
    ! Dump lightcone					      <
     if(lightcone) then					      <
        call output_cone()				      <
     end if						      <

!     ! Dump movie frame				      |	     ! Important can't be done in sink routines because it mu
!     if(movie) then					      |	     if(sink)acc_rate=0.
!        call output_frame()				      <
!     end if						      <

  endif								  endif

							      >	  !----------------------------
							      >	  ! Output frame to movie dump (without synced levels)
							      >	  !----------------------------
							      >	  if(movie) then
							      >	     if(aexp>=amovout(imov).or.t>=tmovout(imov))then
							      >	        call output_frame()
							      >	     endif
							      >	  end if
							      >
  !----------------------------------------------------------	  !----------------------------------------------------------
  ! Put here all stuffs that are done only at coarse time ste	  ! Put here all stuffs that are done only at coarse time ste
  !----------------------------------------------------------	  !----------------------------------------------------------
  if(ilevel==levelmin)then					  if(ilevel==levelmin)then
     !----------------------------------------------------	     !----------------------------------------------------
     ! Kinetic feedback from giant molecular clouds		     ! Kinetic feedback from giant molecular clouds
     !----------------------------------------------------	     !----------------------------------------------------
     if(hydro.and.star.and.eta_sn>0.and.f_w>0)call kinetic_fe	     if(hydro.and.star.and.eta_sn>0.and.f_w>0)call kinetic_fe
     							      <
     !-----------------------------------------------------   <
     ! Create sink particles and associated cloud particles   <
     !-----------------------------------------------------   <
     if(sink)call create_sink				      <
  endif							      <
							      <

 							      <
  !---------------------				      <
  ! Supernova explosions				      <
  !---------------------				      <
  if(supernovae .and. ilevel == levelmin) then		      <
     if(sn_freq_mult .eq. 0.) then 			      <
       if(t >= sn_time(sn_i) .and. .not. sn_all) then	      <
           if(myid == 1) write (*,*) 'Supernova, t =', t, 'sn <
           call make_sn					      <
!           if(tracer) call create_sn_tracer		      <
           if(sn_i == sn_count) then			      <
              sn_all = .true.				      <
           else						      <
              sn_i = sn_i + 1				      <
           endif					      <
        endif						      <
     else						      <
       do while (t >= t_last_sn + sn_freq)		      <
         ii = ii + 1 					      <
         if(myid ==1) write(*,*) 'make SN',ii,' time ',t      <
         call make_sn					      <
         t_last_sn = t_last_sn + sn_freq		      <
       end do						      <
     endif						      <
  endif								  endif

							      <
							      <
  !--------------------						  !--------------------
  ! Poisson source term						  ! Poisson source term
  !--------------------						  !--------------------
  if(poisson)call rho_fine(ilevel,icount)		      |	  if(poisson)then
							      >	     !save old potential for time-extrapolation at level boun
							      >	     call save_phi_old(ilevel)
							      >	     call rho_fine(ilevel,icount)
							      >	  endif

  !-------------------------------------------			  !-------------------------------------------
  ! Sort particles between ilevel and ilevel+1			  ! Sort particles between ilevel and ilevel+1
  !-------------------------------------------			  !-------------------------------------------
  if(pic)then							  if(pic)then
     ! Remove particles to finer levels				     ! Remove particles to finer levels
     call kill_tree_fine(ilevel)				     call kill_tree_fine(ilevel)
     ! Update boundary conditions for remaining particles	     ! Update boundary conditions for remaining particles
     call virtual_tree_fine(ilevel)				     call virtual_tree_fine(ilevel)
  end if							  end if

  !---------------						  !---------------
  ! Gravity update						  ! Gravity update
  !---------------						  !---------------
  if(poisson)then						  if(poisson)then
 								 
     ! Remove gravity source term with half time step and old	     ! Remove gravity source term with half time step and old
     if(hydro)then						     if(hydro)then
        call synchro_hydro_fine(ilevel,-0.5*dtnew(ilevel))	        call synchro_hydro_fine(ilevel,-0.5*dtnew(ilevel))
     endif							     endif
							      |	     
     ! Compute gravitational potential				     ! Compute gravitational potential
     if(ilevel>levelmin)then					     if(ilevel>levelmin)then
        if(ilevel .ge. cg_levelmin) then			        if(ilevel .ge. cg_levelmin) then
           call phi_fine_cg(ilevel,icount)			           call phi_fine_cg(ilevel,icount)
        else							        else
           call multigrid_fine(ilevel)			      |	           call multigrid_fine(ilevel,icount)
        end if							        end if
     else							     else
        call multigrid_fine(levelmin)			      |	        call multigrid_fine(levelmin,icount)
     end if							     end if
							      >	     !when there is no old potential...
							      >	     if (nstep==0)call save_phi_old(ilevel)

     ! Compute gravitational acceleration			     ! Compute gravitational acceleration
     call force_fine(ilevel)				      |	     call force_fine(ilevel,icount)

     ! Thermal feedback from stars				     ! Thermal feedback from stars
     if(hydro.and.star.and.eta_sn>0)call thermal_feedback(ile	     if(hydro.and.star.and.eta_sn>0)call thermal_feedback(ile

     ! Synchronize remaining particles for gravity		     ! Synchronize remaining particles for gravity
     if(pic)then						     if(pic)then
        call synchro_fine(ilevel)				        call synchro_fine(ilevel)
     end if							     end if

     if(hydro)then						     if(hydro)then

							      >	        ! Compute Bondi-Hoyle accretion parameters
							      >	        if(sink.and.bondi)call bondi_hoyle(ilevel)
							      >
        ! Add gravity source term with half time step and new	        ! Add gravity source term with half time step and new
        call synchro_hydro_fine(ilevel,+0.5*dtnew(ilevel))	        call synchro_hydro_fine(ilevel,+0.5*dtnew(ilevel))

        ! Density threshold and/or Bondi accretion onto sink  <
        if(sink)then					      <
           if(bondi)then				      <
              call grow_bondi(ilevel)			      <
           else						      <
              call grow_jeans(ilevel)			      <
           endif					      <
        endif						      <
							      <
        ! Update boundaries					        ! Update boundaries
#ifdef SOLVERmhd						#ifdef SOLVERmhd
        do ivar=1,nvar+3					        do ivar=1,nvar+3
#else								#else
        do ivar=1,nvar						        do ivar=1,nvar
#endif								#endif
           call make_virtual_fine_dp(uold(1,ivar),ilevel)	           call make_virtual_fine_dp(uold(1,ivar),ilevel)
							      >	#ifdef SOLVERmhd
        end do							        end do
							      >	#else
							      >	        end do
							      >	#endif
        if(simple_boundary)call make_boundary_hydro(ilevel)	        if(simple_boundary)call make_boundary_hydro(ilevel)
     end if							     end if
							      <
  end if							  end if

							      >	#ifdef RT
							      >	  ! Turn on RT in case of rt_stars and first stars just creat
							      >	  ! Update photon packages according to star particles
							      >	  if(rt .and. rt_star) call update_star_RT_feedback(ilevel)
							      >	#endif
							      >
  !----------------------					  !----------------------
  ! Compute new time step					  ! Compute new time step
  !----------------------					  !----------------------
  call newdt_fine(ilevel)					  call newdt_fine(ilevel)
  if(ilevel>levelmin)then					  if(ilevel>levelmin)then
     dtnew(ilevel)=MIN(dtnew(ilevel-1)/real(nsubcycle(ilevel-	     dtnew(ilevel)=MIN(dtnew(ilevel-1)/real(nsubcycle(ilevel-
  end if							  end if

  ! Set unew equal to uold					  ! Set unew equal to uold
  if(hydro)call set_unew(ilevel)				  if(hydro)call set_unew(ilevel)

							      >	#ifdef RT
							      >	  ! Set rtunew equal to rtuold
							      >	  if(rt)call rt_set_unew(ilevel)
							      >	#endif
							      >
  !---------------------------					  !---------------------------
  ! Recursive call to amr_step					  ! Recursive call to amr_step
  !---------------------------					  !---------------------------
  if(ilevel<nlevelmax)then					  if(ilevel<nlevelmax)then
     if(numbtot(1,ilevel+1)>0)then				     if(numbtot(1,ilevel+1)>0)then
        if(nsubcycle(ilevel)==2)then				        if(nsubcycle(ilevel)==2)then
           call amr_step(ilevel+1,1)				           call amr_step(ilevel+1,1)
           call amr_step(ilevel+1,2)				           call amr_step(ilevel+1,2)
        else							        else
           call amr_step(ilevel+1,1)				           call amr_step(ilevel+1,1)
        endif							        endif
     else 							     else 
        ! Otherwise, update time and finer level time-step	        ! Otherwise, update time and finer level time-step
        dtold(ilevel+1)=dtnew(ilevel)/dble(nsubcycle(ilevel))	        dtold(ilevel+1)=dtnew(ilevel)/dble(nsubcycle(ilevel))
        dtnew(ilevel+1)=dtnew(ilevel)/dble(nsubcycle(ilevel))	        dtnew(ilevel+1)=dtnew(ilevel)/dble(nsubcycle(ilevel))
        call update_time(ilevel)				        call update_time(ilevel)
							      >	        if(sink)call update_sink(ilevel)
     end if							     end if
  else								  else
     call update_time(ilevel)					     call update_time(ilevel)
							      >	     if(sink)call update_sink(ilevel)
  end if							  end if

							      >	#ifdef RT
							      >	  ! Add stellar radiation sources
							      >	  if(rt.and.rt_star) call star_RT_feedback(ilevel,dtnew(ileve
							      >	#endif
							      >
  !---------------						  !---------------
  ! Move particles						  ! Move particles
  !---------------						  !---------------
  if(pic)then							  if(pic)then
     call move_fine(ilevel) ! Only remaining particles		     call move_fine(ilevel) ! Only remaining particles
  end if							  end if

  !-----------							  !-----------
  ! Hydro step							  ! Hydro step
  !-----------							  !-----------
  if(hydro)then							  if(hydro)then

     ! Hyperbolic solver					     ! Hyperbolic solver
     call godunov_fine(ilevel)					     call godunov_fine(ilevel)

     ! Reverse update boundaries				     ! Reverse update boundaries
#ifdef SOLVERmhd						#ifdef SOLVERmhd
     do ivar=1,nvar+3						     do ivar=1,nvar+3
#else								#else
     do ivar=1,nvar						     do ivar=1,nvar
#endif								#endif
        call make_virtual_reverse_dp(unew(1,ivar),ilevel)	        call make_virtual_reverse_dp(unew(1,ivar),ilevel)
							      >	#ifdef SOLVERmhd
							      >	     end do
							      >	#else
     end do							     end do
							      >	#endif
     if(pressure_fix)then					     if(pressure_fix)then
        call make_virtual_reverse_dp(enew(1),ilevel)		        call make_virtual_reverse_dp(enew(1),ilevel)
        call make_virtual_reverse_dp(divu(1),ilevel)		        call make_virtual_reverse_dp(divu(1),ilevel)
     endif							     endif

     ! Set uold equal to unew					     ! Set uold equal to unew
     call set_uold(ilevel)					     call set_uold(ilevel)

							      >	     ! Density threshold or Bondi accretion onto sink particl
							      >	     if(sink)call grow_sink(ilevel)
							      >
     ! Add gravity source term with half time step and old fo	     ! Add gravity source term with half time step and old fo
     ! in order to complete the time step 			     ! in order to complete the time step 
     if(poisson)call synchro_hydro_fine(ilevel,+0.5*dtnew(ile	     if(poisson)call synchro_hydro_fine(ilevel,+0.5*dtnew(ile

     ! Restriction operator					     ! Restriction operator
     call upload_fine(ilevel)					     call upload_fine(ilevel)

     ! Cooling source term in leaf cells only		      |	  endif
     if(cooling.or.T2_star>0.0)call cooling_fine(ilevel)      |
							      >	#ifdef RT
							      >	  !---------------
							      >	  ! Radiation step
							      >	  !---------------
							      >	  if(rt)then
							      >	     ! Hyperbolic solver
							      >	     if(rt_advect) call rt_godunov_fine(ilevel,dtnew(ilevel))
							      >
							      >	     call add_rt_sources(ilevel,dtnew(ilevel))

     ! Star formation in leaf cells only		      |	     ! Reverse update boundaries
     if(star)call star_formation(ilevel)		      |	     do ivar=1,nrtvar
							      >	        call make_virtual_reverse_dp(rtunew(1,ivar),ilevel)
							      >	     end do

     ! Compute Bondi-Hoyle accretion parameters		      |	     ! Set rtuold equal to rtunew
     if(sink.and.bondi)call bondi_hoyle(ilevel)		      |	     call rt_set_uold(ilevel)

     ! Update boundaries 				      |	     ! Restriction operator
							      >	     call rt_upload_fine(ilevel)
							      >	  endif
							      >	#endif
							      >	  
							      >	  !-------------------------------
							      >	  ! Source term in leaf cells only
							      >	  !-------------------------------
							      >	  if(neq_chem.or.cooling.or.T2_star>0.0)call cooling_fine(ile
							      >
							      >	  !----------------------------------
							      >	  ! Star formation in leaf cells only
							      >	  !----------------------------------
							      >	  if(hydro.and.star)call star_formation(ilevel)
							      >
							      >	  !---------------------------------------
							      >	  ! Update physical and virtual boundaries
							      >	  !---------------------------------------
							      >	  if(hydro)then
#ifdef SOLVERmhd						#ifdef SOLVERmhd
     do ivar=1,nvar+3						     do ivar=1,nvar+3
#else								#else
     do ivar=1,nvar						     do ivar=1,nvar
#endif								#endif
        call make_virtual_fine_dp(uold(1,ivar),ilevel)		        call make_virtual_fine_dp(uold(1,ivar),ilevel)
							      >	#ifdef SOLVERmhd
							      >	     end do
							      >	#else
     end do							     end do
							      >	#endif
     if(simple_boundary)call make_boundary_hydro(ilevel)	     if(simple_boundary)call make_boundary_hydro(ilevel)
							      >	  endif
							      >	#ifdef RT
							      >	  if(rt)then
							      >	     do ivar=1,nrtvar
							      >	        call make_virtual_fine_dp(rtuold(1,ivar),ilevel)
							      >	     end do
							      >	     if(simple_boundary)call rt_make_boundary_hydro(ilevel)
							      >	  end if
							      >	#endif

     ! Magnetic diffusion step				      <
#ifdef SOLVERmhd						#ifdef SOLVERmhd
							      >	  ! Magnetic diffusion step
							      >	 if(hydro)then
     if(eta_mag>0d0.and.ilevel==levelmin)then			     if(eta_mag>0d0.and.ilevel==levelmin)then
        call diffusion						        call diffusion
     endif							     endif
#endif							      <
							      <
    call velocity_fine(ilevel)				      <
							      <
  end if							  end if
							      >	#endif

  !-----------------------					  !-----------------------
  ! Compute refinement map					  ! Compute refinement map
  !-----------------------					  !-----------------------
  call flag_fine(ilevel,icount)				      |	  if(.not.static) call flag_fine(ilevel,icount)
							      >

  !----------------------------					  !----------------------------
  ! Merge finer level particles					  ! Merge finer level particles
  !----------------------------					  !----------------------------
  if(pic)call merge_tree_fine(ilevel)				  if(pic)call merge_tree_fine(ilevel)

  !---------------						  !---------------
  ! Radiation step						  ! Radiation step
  !---------------						  !---------------
#ifdef ATON							#ifdef ATON
  if(aton.and.ilevel==levelmin)then				  if(aton.and.ilevel==levelmin)then
     call rad_step(dtnew(ilevel))				     call rad_step(dtnew(ilevel))
  endif								  endif
#endif								#endif

							      >	  if(sink)then
							      >	     !-------------------------------
							      >	     ! Update coarser level sink velocity
							      >	     !-------------------------------
							      >	     if(ilevel>levelmin)then
							      >	        vsold(1:nsink,1:ndim,ilevel-1)=vsnew(1:nsink,1:ndim,i
							      >	        if(nsubcycle(ilevel-1)==1)vsnew(1:nsink,1:ndim,ilevel
							      >	        if(icount==2)vsnew(1:nsink,1:ndim,ilevel-1)= &
							      >	             (vsold(1:nsink,1:ndim,ilevel)*dtold(ilevel)+vsne
							      >	             (dtold(ilevel)+dtnew(ilevel))
							      >	     end if
							      >	     !---------------
							      >	     ! Sink production
							      >	     !---------------
							      >	     if(ilevel==levelmin)call create_sink
							      >	  end if
							      >
  !-------------------------------				  !-------------------------------
  ! Update coarser level time-step				  ! Update coarser level time-step
  !-------------------------------				  !-------------------------------
  if(ilevel>levelmin)then					  if(ilevel>levelmin)then
     if(nsubcycle(ilevel-1)==1)dtnew(ilevel-1)=dtnew(ilevel)	     if(nsubcycle(ilevel-1)==1)dtnew(ilevel-1)=dtnew(ilevel)
     if(icount==2)dtnew(ilevel-1)=dtold(ilevel)+dtnew(ilevel)	     if(icount==2)dtnew(ilevel-1)=dtold(ilevel)+dtnew(ilevel)
  end if							  end if

999 format(' Entering amr_step',i1,' for level',i2)		999 format(' Entering amr_step',i1,' for level',i2)

end subroutine amr_step						end subroutine amr_step
							      >



